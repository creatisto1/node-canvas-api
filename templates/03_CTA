const { createCanvas } = require('canvas');

module.exports = async function generateTemplate_03_CTA(img, overlayText, targetWidth, targetHeight, website) {
  const canvas = createCanvas(targetWidth, targetHeight);
  const ctx = canvas.getContext('2d');

  // === Hintergrundfarbe unten ===
  ctx.fillStyle = '#FDF8F6';
  ctx.fillRect(0, 0, targetWidth, targetHeight);

  // === Oben zentrales Bild (proportional zentriert und beschnitten) ===
  const topImageHeight = targetHeight * 0.6;

  const imgWidth = img.width;
  const imgHeight = img.height;

  const scale = Math.max(targetWidth / imgWidth, topImageHeight / imgHeight);
  const scaledWidth = imgWidth * scale;
  const scaledHeight = imgHeight * scale;
  const sx = (scaledWidth - targetWidth) / 2 / scale;
  const sy = (scaledHeight - topImageHeight) / 2 / scale;
  const sWidth = targetWidth / scale;
  const sHeight = topImageHeight / scale;

  ctx.drawImage(img, sx, sy, sWidth, sHeight, 0, 0, targetWidth, topImageHeight);

  // === Overlay Text (umgebrochen) ===
  const padding = 40;
  const maxTextWidth = targetWidth * 0.8;
  const maxTextBlockHeight = targetHeight * 0.2;
  const maxLines = 3;

  let chosenFontSize = 16;
  let lines = [];
  let lineHeight = 0;

  for (let size = 96; size >= 16; size -= 2) {
    ctx.font = `bold ${size}px "Averta"`;
    lineHeight = size * 1.3;
    const testLines = wrapText(ctx, overlayText, maxTextWidth, maxLines);
    const totalTextHeight = testLines.length * lineHeight;
    const joined = testLines.join('').replace(/-/g, '').replace(/\s/g, '');
    const original = overlayText.replace(/-/g, '').replace(/\s/g, '');
    if (
      testLines.length <= maxLines &&
      totalTextHeight <= maxTextBlockHeight &&
      joined === original
    ) {
      chosenFontSize = size;
      lines = testLines;
      break;
    }
  }

  if (lines.length === 0) {
    ctx.font = `bold 16px "Averta"`;
    lineHeight = 16 * 1.3;
    lines = wrapText(ctx, overlayText, maxTextWidth, maxLines);
  }

  ctx.fillStyle = '#4F4F4F';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'top';
  ctx.font = `bold ${chosenFontSize}px "Averta"`;

  const totalTextHeight = lines.length * lineHeight;
  let startY = topImageHeight + 40;

  lines.forEach((line, index) => {
    ctx.fillText(line, targetWidth / 2, startY + index * lineHeight);
  });

  // === Button "JETZT BESUCHEN" ===
  const buttonText = 'JETZT BESUCHEN';
  const buttonFontSize = Math.floor(targetHeight * 0.035);
  const buttonPaddingX = 40;
  const buttonPaddingY = 20;

  ctx.font = `bold ${buttonFontSize}px "Averta"`;
  const textWidth = ctx.measureText(buttonText).width;
  const buttonWidth = textWidth + buttonPaddingX * 2;
  const buttonHeight = buttonFontSize + buttonPaddingY * 2;
  const buttonX = targetWidth / 2 - buttonWidth / 2;
  const buttonY = startY + totalTextHeight + 40;

  ctx.fillStyle = '#A25C48';
  ctx.fillRect(buttonX, buttonY, buttonWidth, buttonHeight);

  ctx.fillStyle = '#FFFFFF';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.fillText(buttonText, targetWidth / 2, buttonY + buttonHeight / 2);

  // === URL unter dem Button ===
  const urlText = website || "www.creatisto.com";
  const urlFontSize = Math.floor(chosenFontSize * 0.5);
  ctx.font = `bold ${urlFontSize}px "Averta"`;
  ctx.fillStyle = '#4F4F4F';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'top';

  const urlY = buttonY + buttonHeight + 12;
  ctx.fillText(urlText, targetWidth / 2, urlY);

  return canvas;
};

// === Hilfsfunktionen ===
function breakLongWord(ctx, word, maxWidth) {
  let parts = [], current = '';
  for (let char of word) {
    const test = current + char;
    if (ctx.measureText(test).width > maxWidth) {
      if (current.length > 0) {
        parts.push(current + '-');
        current = char;
      } else {
        parts.push(char);
        current = '';
      }
    } else {
      current = test;
    }
  }
  if (current.length > 0) parts.push(current);
  return parts;
}

function wrapText(ctx, text, maxWidth, maxLines) {
  const words = text.split(' ');
  let lines = [], currentLine = '';

  for (let word of words) {
    if (ctx.measureText(word).width > maxWidth) {
      const broken = breakLongWord(ctx, word, maxWidth);
      for (let part of broken) {
        if (currentLine.length > 0) {
          lines.push(currentLine);
          currentLine = '';
        }
        lines.push(part);
        if (lines.length === maxLines) return lines;
      }
      continue;
    }

    const testLine = currentLine ? currentLine + ' ' + word : word;
    if (ctx.measureText(testLine).width <= maxWidth) {
      currentLine = testLine;
    } else {
      lines.push(currentLine);
      currentLine = word;
      if (lines.length === maxLines) return lines;
    }
  }

  if (currentLine && lines.length < maxLines) lines.push(currentLine);
  return lines;
}
