const { createCanvas /*, registerFont */ } = require('canvas');

/**
 * Generiert ein Pinterest-Pin-Canvas.
 * Rückgabe: Canvas-Objekt. Wenn du ein PNG-Buffer brauchst, rufe canvas.toBuffer('image/png').
 */
module.exports = function generateTemplate_PinterestPin(quadCanvas, overlayText, website) {
  const targetWidth = 1000;
  const targetHeight = 1500;
  const canvas = createCanvas(targetWidth, targetHeight);
  const ctx = canvas.getContext('2d');

  // Optional: eigene Font registrieren (uncomment + Pfad anpassen)
  // registerFont('/path/to/OpenSans-Bold.ttf', { family: 'Open Sans', weight: 'bold' });

  overlayText = overlayText ? String(overlayText).trim() : 'JETZT REINSCHAUEN';
  website = website ? String(website).trim() : 'www.creatisto.com';

  // === Hintergrundfarbe ===
  ctx.fillStyle = '#FDF8F6';
  ctx.fillRect(0, 0, targetWidth, targetHeight);

  // === Quadrat-Bild oben einfügen (1000x1000) ===
  if (quadCanvas) {
    try {
      ctx.drawImage(quadCanvas, 0, 0, targetWidth, 1000);
    } catch (e) {
      // Falls quadCanvas kein gültiges Image/Canvas ist, ignore - caller sollte validieren
      console.warn('quadCanvas konnte nicht gezeichnet werden:', e.message);
    }
  }

  // === Unterer farbiger Bereich mit Welle ===
  const waveHeight = 80;
  const colorStartY = 1000;
  const colorHeight = targetHeight - colorStartY;

  // Farbverlauf erstellen
  const gradient = ctx.createLinearGradient(0, colorStartY - waveHeight, 0, targetHeight);
  gradient.addColorStop(0, 'rgba(74,194,194,0)');
  gradient.addColorStop(0.2, '#4AC2C2');
  gradient.addColorStop(1, '#4AC2C2');

  // Wave-Path (für Fill)
  ctx.beginPath();
  ctx.moveTo(0, colorStartY);
  ctx.bezierCurveTo(
    targetWidth * 0.25, colorStartY - waveHeight,
    targetWidth * 0.75, colorStartY + waveHeight,
    targetWidth, colorStartY
  );
  ctx.lineTo(targetWidth, targetHeight);
  ctx.lineTo(0, targetHeight);
  ctx.closePath();

  // Fill mit Gradient
  ctx.fillStyle = gradient;
  ctx.fill();

  // === Papierstruktur nur auf dem farbigen Bereich (Clip verwenden) ===
  const textureCanvas = createCanvas(targetWidth, colorHeight);
  const textureCtx = textureCanvas.getContext('2d');
  textureCtx.fillStyle = 'rgba(255,255,255,0.05)';
  const points = 3000;
  for (let i = 0; i < points; i++) {
    const x = Math.random() * targetWidth;
    const y = Math.random() * colorHeight;
    const size = Math.random() * 2;
    textureCtx.fillRect(x, y, size, size);
  }

  // Clip auf die gleiche Wellenform und texture nur dort zeichnen
  ctx.save();
  ctx.beginPath();
  ctx.moveTo(0, colorStartY);
  ctx.bezierCurveTo(
    targetWidth * 0.25, colorStartY - waveHeight,
    targetWidth * 0.75, colorStartY + waveHeight,
    targetWidth, colorStartY
  );
  ctx.lineTo(targetWidth, targetHeight);
  ctx.lineTo(0, targetHeight);
  ctx.closePath();
  ctx.clip();

  // Zeichne Textur (oben an der farbigen Fläche)
  ctx.drawImage(textureCanvas, 0, colorStartY);
  ctx.restore();

  // === Textblock (responsive Schriftgröße + Zeilenumbruch) ===
  const maxTextWidth = targetWidth * 0.8;
  const maxTextBlockHeight = 200;
  const maxLines = 3;

  let chosenFontSize = 16;
  let lines = [];
  let lineHeight = 0;

  // Test-loop von groß nach klein
  for (let size = 96; size >= 16; size -= 2) {
    ctx.font = `bold ${size}px "Arial", sans-serif`;
    lineHeight = size * 1.25;
    const testLines = wrapText(ctx, overlayText, maxTextWidth, maxLines);
    const totalTextHeight = testLines.length * lineHeight;
    if (testLines.length <= maxLines && totalTextHeight <= maxTextBlockHeight) {
      chosenFontSize = size;
      lines = testLines;
      break;
    }
  }

  if (lines.length === 0) {
    chosenFontSize = 16;
    ctx.font = `bold ${chosenFontSize}px "Arial", sans-serif`;
    lineHeight = chosenFontSize * 1.25;
    lines = wrapText(ctx, overlayText, maxTextWidth, maxLines);
  }

  // === Overlay-Text ===
  ctx.fillStyle = '#FFFFFF';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'top';
  ctx.font = `bold ${chosenFontSize}px "Arial", sans-serif`;

  const totalTextHeight = lines.length * lineHeight;
  const startY = colorStartY + 40; // Abstand von Wellenkante

  lines.forEach((line, index) => {
    ctx.fillText(line, targetWidth / 2, startY + index * lineHeight);
  });

  // === Button ===
  const buttonText = 'MEHR ERFAHREN';
  const buttonFontSize = Math.max(14, Math.floor(targetHeight * 0.035)); // min size
  const buttonPaddingX = 40;
  const buttonPaddingY = 20;

  ctx.font = `bold ${buttonFontSize}px "Arial", sans-serif`;
  const textWidth = ctx.measureText(buttonText).width;
  const buttonWidth = textWidth + buttonPaddingX * 2;
  const buttonHeight = buttonFontSize + buttonPaddingY * 2;
  const buttonX = targetWidth / 2 - buttonWidth / 2;
  const buttonY = startY + totalTextHeight + 40;

  // abgerundetes Rechteck (einfach)
  const radius = 8;
  roundRect(ctx, buttonX, buttonY, buttonWidth, buttonHeight, radius);
  ctx.fillStyle = '#2C9C9C';
  ctx.fill();

  // Button-Text
  ctx.fillStyle = '#FFFFFF';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.fillText(buttonText, targetWidth / 2, buttonY + buttonHeight / 2);

  // === URL unter dem Button ===
  const urlFontSize = 28; // kleiner gesetzt, 43 war sehr groß
  ctx.font = `bold ${urlFontSize}px "Arial", sans-serif`;
  ctx.fillStyle = '#FFFFFF';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'top';

  const urlY = buttonY + buttonHeight + 12;
  ctx.fillText(website, targetWidth / 2, urlY);

  return canvas;
};

// ===== Hilfsfunktionen =====
function wrapText(ctx, text, maxWidth, maxLines) {
  const words = String(text).split(/\s+/);
  const lines = [];
  let current = '';

  for (let w = 0; w < words.length; w++) {
    const word = words[w];
    const test = current ? `${current} ${word}` : word;
    if (ctx.measureText(test).width <= maxWidth) {
      current = test;
      continue;
    }

    // passt nicht mehr: push current (falls vorhanden)
    if (current) {
      lines.push(current);
      current = '';
      if (lines.length >= maxLines) break;
      // re-evaluate this word as new line (fallthrough)
    }

    // Einzelwort länger als maxWidth -> split in Zeichenblöcke
    if (ctx.measureText(word).width > maxWidth) {
      let part = '';
      for (let i = 0; i < word.length; i++) {
        part += word[i];
        if (ctx.measureText(part + (i < word.length - 1 ? '-' : '')).width > maxWidth) {
          // remove last char from part and push
          const pushPart = part.slice(0, -1);
          if (pushPart) {
            lines.push(pushPart + '-');
          }
          part = word[i]; // start new part with current char
          if (lines.length >= maxLines) break;
        }
      }
      if (part && lines.length < maxLines) {
        current = part;
      }
    } else {
      // word fits on a new line
      if (lines.length < maxLines) current = word;
    }
  }

  if (current && lines.length < maxLines) lines.push(current);
  // safety trim
  return lines.slice(0, maxLines);
}

function roundRect(ctx, x, y, width, height, radius) {
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.arcTo(x + width, y, x + width, y + height, radius);
  ctx.arcTo(x + width, y + height, x, y + height, radius);
  ctx.arcTo(x, y + height, x, y, radius);
  ctx.arcTo(x, y, x + width, y, radius);
  ctx.closePath();
}
