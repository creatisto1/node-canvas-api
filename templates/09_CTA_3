const { createCanvas } = require('canvas');

module.exports = function generateTemplate_DIYPin(quadCanvas, overlayText, website) {
  const targetWidth = 1000;
  const targetHeight = 1500;
  const canvas = createCanvas(targetWidth, targetHeight);
  const ctx = canvas.getContext('2d');

  overlayText = overlayText ? String(overlayText).trim() : '';
  website = website ? String(website).trim() : 'www.creatisto.com';

  const barHeight = 80; // Höhe des Balkens oben

  // === Hintergrundfarbe ===
  ctx.fillStyle = '#FDF8F6';
  ctx.fillRect(0, 0, targetWidth, targetHeight);

  // === Durchgehender Balken oben ===
  ctx.fillStyle = '#077b8a'; // Türkis
  ctx.fillRect(0, 0, targetWidth, barHeight);

  // === URL-Text im Balken ===
  const urlFontSize = 36;
  ctx.font = `bold ${urlFontSize}px "Arial", sans-serif`;
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.fillStyle = '#FFFFFF';
  ctx.fillText(website, targetWidth / 2, barHeight / 2);

  // === Quadrat-Bild oben einfügen (1000x1000), nach unten verschoben um barHeight ===
  if (quadCanvas) {
    try {
      ctx.drawImage(quadCanvas, 0, barHeight, targetWidth, 1000);
    } catch (e) {
      console.warn('quadCanvas konnte nicht gezeichnet werden:', e.message);
    }
  }

  // === Harmonische Wellen / Farbverlauf unten, etwas verkürzt ===
  const waveHeight = 40; // reduzierte Wellenhöhe
  const colorStartY = barHeight + 1000; // unterhalb des Bildes
  const colorHeight = targetHeight - colorStartY;

  const gradient = ctx.createLinearGradient(0, colorStartY, 0, targetHeight);
  gradient.addColorStop(0, '#4AC2C2');
  gradient.addColorStop(1, '#077b8a');

  ctx.beginPath();
  const waveCount = 5;
  ctx.moveTo(0, colorStartY);
  for (let x = 0; x <= targetWidth; x++) {
    const y = colorStartY + Math.sin((x / targetWidth) * waveCount * Math.PI * 2) * waveHeight;
    ctx.lineTo(x, y);
  }
  ctx.lineTo(targetWidth, targetHeight);
  ctx.lineTo(0, targetHeight);
  ctx.closePath();
  ctx.fillStyle = gradient;
  ctx.fill();

  // === Overlay Text + Button unterhalb der Wellen ===
  const maxTextWidth = targetWidth * 0.8;
  const maxTextBlockHeight = 200;
  const maxLines = 3;

  let chosenFontSize = 16;
  let lines = [];
  let lineHeight = 0;

  if (overlayText) {
    for (let size = 96; size >= 16; size -= 2) {
      ctx.font = `bold ${size}px "Arial", sans-serif`;
      lineHeight = size * 1.25;
      const testLines = wrapText(ctx, overlayText, maxTextWidth, maxLines);
      const totalTextHeight = testLines.length * lineHeight;
      if (testLines.length <= maxLines && totalTextHeight <= maxTextBlockHeight) {
        chosenFontSize = size * 1.1; // 10% größer
        lines = testLines;
        break;
      }
    }

    if (lines.length === 0) {
      chosenFontSize = 16;
      ctx.font = `bold ${chosenFontSize}px "Arial", sans-serif`;
      lineHeight = chosenFontSize * 1.25;
      lines = wrapText(ctx, overlayText, maxTextWidth, maxLines);
    }

    // Overlay Text
    ctx.fillStyle = '#333333';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'top';
    ctx.font = `bold ${chosenFontSize}px "Arial", sans-serif`;

    const totalTextHeight = lines.length * lineHeight;
    const startY = colorStartY + waveHeight + 20;

    lines.forEach((line, index) => {
      ctx.fillText(line, targetWidth / 2, startY + index * lineHeight);
    });

    // Button "JETZT ENTDECKEN"
    const buttonText = 'JETZT ENTDECKEN';
    const buttonFontSize = Math.max(14, Math.floor(targetHeight * 0.035 * 1.1)); // 10% größer
    const buttonPaddingX = 40;
    const buttonPaddingY = 20;

    ctx.font = `bold ${buttonFontSize}px "Arial", sans-serif`;
    const textWidth = ctx.measureText(buttonText).width;
    const buttonWidth = textWidth + buttonPaddingX * 2;
    const buttonHeight = buttonFontSize + buttonPaddingY * 2;
    const buttonX = targetWidth / 2 - buttonWidth / 2;
    const buttonY = startY + totalTextHeight + 50;

    roundRect(ctx, buttonX, buttonY, buttonWidth, buttonHeight, 8);
    ctx.fillStyle = '#055f66';
    ctx.fill();

    ctx.fillStyle = '#FFFFFF';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(buttonText, targetWidth / 2, buttonY + buttonHeight / 2);
  }

  return canvas;
};

// ===== Hilfsfunktionen =====
function wrapText(ctx, text, maxWidth, maxLines) {
  const words = String(text).split(/\s+/);
  const lines = [];
  let current = '';

  for (let w = 0; w < words.length; w++) {
    const word = words[w];
    const test = current ? `${current} ${word}` : word;
    if (ctx.measureText(test).width <= maxWidth) {
      current = test;
      continue;
    }

    if (current) {
      lines.push(current);
      current = '';
      if (lines.length >= maxLines) break;
    }

    if (ctx.measureText(word).width > maxWidth) {
      let part = '';
      for (let i = 0; i < word.length; i++) {
        part += word[i];
        if (ctx.measureText(part + (i < word.length - 1 ? '-' : '')).width > maxWidth) {
          const pushPart = part.slice(0, -1);
          if (pushPart) lines.push(pushPart + '-');
          part = word[i];
          if (lines.length >= maxLines) break;
        }
      }
      if (part && lines.length < maxLines) current = part;
    } else {
      if (lines.length < maxLines) current = word;
    }
  }

  if (current && lines.length < maxLines) lines.push(current);
  return lines.slice(0, maxLines);
}

function roundRect(ctx, x, y, width, height, radius) {
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.arcTo(x + width, y, x + width, y + height, radius);
  ctx.arcTo(x + width, y + height, x, y + height, radius);
  ctx.arcTo(x, y + height, x, y, radius);
  ctx.arcTo(x, y, x + width, y, radius);
  ctx.closePath();
}
