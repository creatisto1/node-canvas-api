const { createCanvas } = require('canvas');

module.exports = function generateTemplate_DIYPin(quadCanvas, overlayText, website) {
  const targetWidth = 1000;
  const targetHeight = 1500;
  const canvas = createCanvas(targetWidth, targetHeight);
  const ctx = canvas.getContext('2d');

  overlayText = overlayText ? String(overlayText).trim() : '';
  website = website ? String(website).trim() : 'www.creatisto.com';

  const barHeight = 100;
  const beigeColor = '#F5F0E6';

  // Hintergrund
  ctx.fillStyle = '#FDF8F6';
  ctx.fillRect(0, 0, targetWidth, targetHeight);

  // Balken oben
  ctx.fillStyle = beigeColor;
  ctx.fillRect(0, 0, targetWidth, barHeight);

  // URL
  const urlFontSize = 50;
  ctx.font = `bold ${urlFontSize}px "Arial", sans-serif`;
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.fillStyle = '#333333';
  ctx.fillText(website, targetWidth / 2, barHeight / 2);

  // Quadratbild
  if (quadCanvas) {
    try {
      ctx.drawImage(quadCanvas, 0, barHeight, targetWidth, 1000);
    } catch (e) {
      console.warn('quadCanvas konnte nicht gezeichnet werden:', e.message);
    }
  }

  // unterer Bereich
  const lowerY = barHeight + 1000;
  const lowerHeight = targetHeight - lowerY;
  ctx.fillStyle = beigeColor;
  ctx.fillRect(0, lowerY, targetWidth, lowerHeight);

  // === Text + Button Einstellungen ===
  const maxTextWidth = targetWidth * 0.8;
  const maxTextBlockHeight = 200; // Platz für Textblock (inkl. Abstand zum Button)
  const maxLines = 3;

  const maxFont = 96;
  const minFont = 12;
  const lineMultiplier = 1.2;

  if (overlayText) {
    // Versuche von groß nach klein eine passende Schriftgröße zu finden.
    let chosenFont = null;
    let chosenLines = null;
    let chosenLineHeight = null;

    for (let size = maxFont; size >= minFont; size--) {
      ctx.font = `bold ${size}px "Arial", sans-serif`;
      const lineHeight = Math.ceil(size * lineMultiplier);
      const lines = wrapTextFull(ctx, overlayText, maxTextWidth);
      const totalHeight = lines.length * lineHeight;

      if (lines.length <= maxLines && totalHeight <= maxTextBlockHeight) {
        chosenFont = size;
        chosenLines = lines;
        chosenLineHeight = lineHeight;
        break;
      }
    }

    // Wenn nichts gefunden: fallback auf minFont und ellipsize ggf. die letzte Zeile
    if (!chosenFont) {
      chosenFont = minFont;
      ctx.font = `bold ${chosenFont}px "Arial", sans-serif`;
      chosenLineHeight = Math.ceil(chosenFont * lineMultiplier);
      let lines = wrapTextFull(ctx, overlayText, maxTextWidth);

      // Falls mehr Lines als erlaubt -> beschneide auf maxLines
      if (lines.length > maxLines) {
        lines = lines.slice(0, maxLines);
      }

      // Stelle sicher, dass die letzte Zeile in die Breite passt (ansonsten ellipsize)
      if (lines.length > 0) {
        lines[lines.length - 1] = ellipsizeLine(ctx, lines[lines.length - 1], maxTextWidth);
      }

      chosenLines = lines;
    }

    // Zeichnen
    ctx.fillStyle = '#333333';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'top';
    ctx.font = `bold ${chosenFont}px "Arial", sans-serif`;

    const totalTextHeight = chosenLines.length * chosenLineHeight;
    const paddingTop = 20;
    const startY = lowerY + paddingTop;

    // Falls gesamter Block (Text + Button) trotzdem zu groß für lowerHeight -> versuche nochmal zu schrumpfen
    const estimatedButtonHeight = Math.max(36, Math.floor(targetHeight * 0.035));
    const buttonGap = 20;
    if (totalTextHeight + buttonGap + estimatedButtonHeight + paddingTop > lowerHeight) {
      // iterativ weiter verkleinern bis es passt oder minFont erreicht ist
      let fits = false;
      for (let size = chosenFont - 1; size >= minFont; size--) {
        ctx.font = `bold ${size}px "Arial", sans-serif`;
        const lineHeight = Math.ceil(size * lineMultiplier);
        let lines = wrapTextFull(ctx, overlayText, maxTextWidth);
        if (lines.length > maxLines) lines = lines.slice(0, maxLines);
        const tot = lines.length * lineHeight + buttonGap + estimatedButtonHeight + paddingTop;
        if (tot <= lowerHeight) {
          chosenFont = size;
          chosenLines = lines;
          chosenLineHeight = lineHeight;
          fits = true;
          break;
        }
      }
      // falls nach dieser Schleife nichts passt: ellipsize letzte Zeile (bei minFont)
      if (!fits) {
        ctx.font = `bold ${minFont}px "Arial", sans-serif`;
        chosenFont = minFont;
        chosenLineHeight = Math.ceil(minFont * lineMultiplier);
        let lines = wrapTextFull(ctx, overlayText, maxTextWidth).slice(0, maxLines);
        if (lines.length > 0) lines[lines.length - 1] = ellipsizeLine(ctx, lines[lines.length - 1], maxTextWidth);
        chosenLines = lines;
      }
      // setze Font wieder
      ctx.font = `bold ${chosenFont}px "Arial", sans-serif`;
    }

    // Endgültig zeichnen
    for (let i = 0; i < chosenLines.length; i++) {
      ctx.fillText(chosenLines[i], targetWidth / 2, startY + i * chosenLineHeight);
    }

    // Button-Berechnung
    const scale = 0.92;
    const buttonText = 'JETZT ENTDECKEN';
    let buttonFontSize = Math.max(14, Math.floor(targetHeight * 0.035 * 1.1));
    buttonFontSize = Math.floor(buttonFontSize * scale);

    const buttonPaddingX = 40 * scale;
    const buttonPaddingY = 14 * scale;

    ctx.font = `bold ${buttonFontSize}px "Arial", sans-serif`;
    const textWidth = ctx.measureText(buttonText).width;
    const buttonWidth = textWidth + buttonPaddingX * 2;
    const buttonHeight = buttonFontSize + buttonPaddingY * 2;

    const buttonX = targetWidth / 2 - buttonWidth / 2;
    let buttonY = startY + chosenLines.length * chosenLineHeight + 20;

    // Falls der Button über das Canvas hinaus geht -> nach oben schieben (so viel wie nötig)
    const bottomPadding = 12;
    if (buttonY + buttonHeight + bottomPadding > targetHeight) {
      buttonY = targetHeight - bottomPadding - buttonHeight;
    }

    roundRect(ctx, buttonX, buttonY, buttonWidth, buttonHeight, 8);
    ctx.fillStyle = '#C0A880';
    ctx.fill();

    ctx.fillStyle = '#FFFFFF';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(buttonText, targetWidth / 2, buttonY + buttonHeight / 2);
  }

  return canvas;
};

// Hilfsfunktionen

// Wrappt Text in beliebig viele Zeilen basierend auf aktueller ctx.font und maxWidth (kein MaxLines cut)
function wrapTextFull(ctx, text, maxWidth) {
  const words = String(text).split(/\s+/);
  const lines = [];
  let current = '';

  for (let w = 0; w < words.length; w++) {
    const word = words[w];
    const test = current ? `${current} ${word}` : word;
    if (ctx.measureText(test).width <= maxWidth) {
      current = test;
      continue;
    }

    if (current) {
      lines.push(current);
      current = '';
    }

    // falls ein einzelnes Wort breiter als maxWidth -> splitten mit Bindestrich
    if (ctx.measureText(word).width > maxWidth) {
      let part = '';
      for (let i = 0; i < word.length; i++) {
        part += word[i];
        const candidate = part + (i < word.length - 1 ? '-' : '');
        if (ctx.measureText(candidate).width > maxWidth) {
          const pushPart = part.slice(0, -1);
          if (pushPart) lines.push(pushPart + '-');
          part = word[i];
        }
      }
      if (part) current = part;
    } else {
      current = word;
    }
  }

  if (current) lines.push(current);
  return lines;
}

// Ellipsize: verkürzt eine Zeile so dass sie in maxWidth passt und hängt '…' an.
function ellipsizeLine(ctx, line, maxWidth) {
  if (ctx.measureText(line).width <= maxWidth) return line;
  const ell = '…';
  let low = 0;
  let high = line.length;
  while (low < high) {
    const mid = Math.floor((low + high) / 2);
    const test = line.slice(0, mid) + ell;
    if (ctx.measureText(test).width <= maxWidth) {
      low = mid + 1;
    } else {
      high = mid;
    }
  }
  return line.slice(0, Math.max(0, low - 1)) + ell;
}

function roundRect(ctx, x, y, width, height, radius) {
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.arcTo(x + width, y, x + width, y + height, radius);
  ctx.arcTo(x + width, y + height, x, y + height, radius);
  ctx.arcTo(x, y + height, x, y, radius);
  ctx.arcTo(x, y, x + width, y, radius);
  ctx.closePath();
}
